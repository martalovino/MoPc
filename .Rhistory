library(devtools)
use_r("create_data")
load("/mnt/hgfs/miRNATool_software/data/data_TCGA_BRCA_rROMA.RData")
# omitting NA --> to be UPDATED WITH MISSING DATA IMPUTATION?
rna <- na.omit(rnaDatTCGA.cancer)
prot <- na.omit(protDatTCGA.cancer.10NA)
mirna <- na.omit(mirDatTCGA.cancer)
rownames(rna)
# sampling
sample(rownames(rna), 500, replace = FALSE, prob = NULL)
# sampling
genes <- sample(rownames(rna), 500, replace = FALSE, prob = NULL)
# sampling
genes <- sample(rownames(rna), 500, replace = FALSE, prob = NULL)
m <- sample(rownames(mirna), 50, replace = FALSE)
rna <- rna[genes, ]
s <- colnames(mirna)[colnames(mirna) %in% colnames(rna)[colnames(rna) %in% colnames(prot)]]
# select only genes with their corresponding protein
ind = which(rownames(prot) %in% rownames(rna))
genes_proteins = rownames(prot)[ind]
rna <- rna[genes_proteins, s]
prot <- prot[genes_proteins, s]
mirna <- mirna[m, s]
use_data(rna, prot, mirna)
use_r("data")
devtools::load_all(".")
data(rna)
?data
??data
devtools::load_all(".")
data(rna)
?rna
devtools::load_all(".")
?data
# load breast cancer dataset
data(rna)
data(prot)
data(mirna)
use_r("minimalist_preproc")
library(devtools)
use_r("minimalist_preproc")
rownames(mirna)
devtools::load_all(".")
?rna
?prot
devtools::load_all(".")
?prot
devtools::load_all(".")
?minimalist_preproc
d <- minimalist_preproc(rna, prot, mirna)
sprintf("Total number of samples: %s", 55, "\n")
devtools::load_all(".")
# minimalist preprocecessing: selecting only common samples and common genes
# between rna and prot
d <- minimalist_preproc(rna, prot, mirna)
devtools::load_all(".")
# minimalist preprocecessing: selecting only common samples and common genes
# between rna and prot
d <- minimalist_preproc(rna, prot, mirna)
d1 <- minimalist_preproc(rna[,1:10], prot[,11:], mirna)
d1 <- minimalist_preproc(rna[,1:10], prot[,11:77], mirna)
library(MoPc)
# load breast cancer dataset
data(rna)
data(prot)
data(mirna)
# minimalist preprocecessing: selecting only common samples and common genes
# between rna and prot
d <- minimalist_preproc(rna, prot, mirna)
devtools::load_all(".")
data(rna)
data(prot)
data(mirna)
# minimalist preprocecessing: selecting only common samples and common genes
# between rna and prot
d <- minimalist_preproc(rna, prot, mirna)
# ------------------------------------------------------------------------------
# sort genes, get gene_annot
# ------------------------------------------------------------------------------
ch <- c("chr1", "chr2", "chr3", "chr4", "chr5", "chr6", "chr7", "chr8", "chr9",
"chr10", "chr11", "chr12", "chr13", "chr14", "chr15", "chr16", "chr17",
"chr18", "chr19", "chr20", "chr21", "chr22", "chrX", "chrY")
library(devtools)
use_data(ch)
use_data(ch, internal = TRUE)
devtools::load_all(".")
# minimalist preprocecessing: selecting only common samples and common genes
# between rna and prot
d <- minimalist_preproc(rna, prot, mirna)
d$mat1
?makeTxDbFromGFF
use_package(GenomicFeatures)
use_package("GenomicFeatures")
use_r("annotate_genes")
# Files for gene/mirna ordering
# Load material to sort genes
txdb = makeTxDbFromGFF( "/mnt/hgfs/miRNATool_software/data/gencode.v33.primary_assembly.annotation.gtf")
# Files for gene/mirna ordering
# Load material to sort genes
txdb = GenomicFeatures::makeTxDbFromGFF( "/mnt/hgfs/miRNATool_software/data/gencode.v33.primary_assembly.annotation.gtf")
gr <- GenomicFeatures::genes(txdb)
ensg_sorted <- names(sort(gr))
gr_sort <- sort(gr)
df <- data.frame(ensg = names(gr_sort),
chr=seqnames(gr_sort),
starts=start(gr_sort),
ends=end(gr_sort))
gr_sort <- sort(gr)
names(gr_sort)
seqnames(gr_sort)
GenomicFeatures::seqnames(gr_sort)
library("GenomicRanges")
df <- data.frame(ensg = names(gr_sort),
chr=seqnames(gr_sort),
starts=start(gr_sort),
ends=end(gr_sort))
common_name <- read.csv("/mnt/hgfs/miRNATool_software/data/common_gene_names.csv", header = TRUE, row.names = 3)
ensg2common <- read.csv("/mnt/hgfs/miRNATool_software/data/common_gene_names.csv", header = TRUE, row.names = 2)
use_data(common_name, df, ensg2common, internal = TRUE)
use_data(ch, common_name, df, ensg2common, internal = TRUE)
use_data(ch, common_name, df, ensg2common, internal = TRUE, overwrite = TRUE)
devtools::load_all(".")
library(devtools)
devtools::load_all(".")
data(rna)
data(prot)
data(mirna)
# minimalist preprocecessing: selecting only common samples and common genes
# between rna and prot
d <- minimalist_preproc(rna, prot, mirna)
common_name
df
colnames(df)
devtools::load_all(".")
# annotate and sort genes/mirnas by chromosomal order
mat1 <- annotate_genes(d$mat1)
mat2 <- annotate_genes(d$mat2)
devtools::load_all(".")
use_r("annotate_mirnas")
# Load material to sort mirnas
txdb1 = makeTxDbFromGFF( "/mnt/hgfs/miRNATool_software/data/mature_miRNA_hg19.gff")
library(GenomicRanges)
library(GenomicFeatures)
# Load material to sort mirnas
txdb1 = makeTxDbFromGFF( "/mnt/hgfs/miRNATool_software/data/mature_miRNA_hg19.gff")
gr1 <- transcripts(txdb1)
gr1_sort <- sort(gr1)
df1 <- data.frame(mirna = mcols(gr1_sort)$tx_name,
chr=seqnames(gr1_sort),
starts=start(gr1_sort),
ends=end(gr1_sort))
# Steps to load example input data in the package
load("/mnt/hgfs/miRNATool_software/data/data_TCGA_BRCA_rROMA.RData")
# omitting NA --> to be UPDATED WITH MISSING DATA IMPUTATION?
rna <- na.omit(rnaDatTCGA.cancer)
prot <- na.omit(protDatTCGA.cancer.10NA)
mirna <- na.omit(mirDatTCGA.cancer)
# sampling
genes <- sample(rownames(rna), 500, replace = FALSE, prob = NULL)
m <- sample(rownames(mirna), 50, replace = FALSE)
rna <- rna[genes, ]
s <- colnames(mirna)[colnames(mirna) %in% colnames(rna)[colnames(rna) %in% colnames(prot)]]
# select only genes with their corresponding protein
ind = which(rownames(prot) %in% rownames(rna))
genes_proteins = rownames(prot)[ind]
rna <- rna[genes_proteins, s]
prot <- prot[genes_proteins, s]
mirna <- mirna[m, s]
use_data(rna, prot, mirna)
# General variables -----------------------------------------------------------
ch <- c("chr1", "chr2", "chr3", "chr4", "chr5", "chr6", "chr7", "chr8", "chr9",
"chr10", "chr11", "chr12", "chr13", "chr14", "chr15", "chr16", "chr17",
"chr18", "chr19", "chr20", "chr21", "chr22", "chrX", "chrY")
# Files for gene/mirna ordering -----------------------------------------------
library(GenomicRanges)
library(GenomicFeatures)
# Load material to sort genes
txdb = GenomicFeatures::makeTxDbFromGFF( "/mnt/hgfs/miRNATool_software/data/gencode.v33.primary_assembly.annotation.gtf")
gr <- GenomicFeatures::genes(txdb)
ensg_sorted <- names(sort(gr))
gr_sort <- sort(gr)
df <- data.frame(ensg = names(gr_sort),
chr=seqnames(gr_sort),
starts=start(gr_sort),
ends=end(gr_sort))
common_name <- read.csv("/mnt/hgfs/miRNATool_software/data/common_gene_names.csv", header = TRUE, row.names = 3)
ensg2common <- read.csv("/mnt/hgfs/miRNATool_software/data/common_gene_names.csv", header = TRUE, row.names = 2)
# Load material to sort mirnas
txdb1 = makeTxDbFromGFF( "/mnt/hgfs/miRNATool_software/data/mature_miRNA_hg19.gff")
gr1 <- transcripts(txdb1)
gr1_sort <- sort(gr1)
df1 <- data.frame(mirna = mcols(gr1_sort)$tx_name,
chr=seqnames(gr1_sort),
starts=start(gr1_sort),
ends=end(gr1_sort))
use_data(ch, common_name, df, ensg2common, df1, internal = TRUE, overwrite = TRUE)
use_vignette("Tutorial_to_MoPc_package", title = "Tutorial to MoPc package")
# MoPc tutorial
library(MoPc)
# load breast cancer dataset
data(rna)
data(prot)
data(mirna)
# minimalist preprocecessing: selecting only common samples and common genes
# between rna and prot
d <- minimalist_preproc(rna, prot, mirna)
# d1 <- minimalist_preproc(rna[,1:10], prot[,11:77], mirna)
# annotate and sort genes/mirnas by chromosomal order
mat1 <- annotate_genes(d$mat1)
mat2 <- annotate_genes(d$mat2)
mat3 <- annotate_mirnas(d$mat3)
library(devtools)
install_github("martalovino/MoPc")
devtools::load_all(".")
# MoPc tutorial
library(MoPc)
# Parameters
corr_method <- "pearson"
mat1_name <- "rna"
mat2_name <- "prot"
mat3_name <- "mirna"
fdr_th <- 0.05
improvement_th <- 0
out_folder <- "results/"
# load breast cancer dataset
data(rna)
data(prot)
data(mirna)
dir.create(out_folder, showWarnings = FALSE)
# minimalist preprocecessing: selecting only common samples and common genes
# between rna and prot
d <- minimalist_preproc(rna, prot, mirna)
# annotate and sort genes/mirnas by chromosomal order
rna <- annotate_genes(d$mat1)
prot <- annotate_genes(d$mat2)
mirna <- annotate_mirnas(d$mat3)
#-------------------------------------------------------------------------------
# DEFINING ROWS and COLUMNS of partial correlation matrix
# usually genes on the rows and mirnas or CNAs on the columns
#-------------------------------------------------------------------------------
genes_proteins <- rownames(rna$data)
condv <- rownames(mirna$data)
gene_annot <- rna$annot
condv_annot <- mirna$annot
rna <- annotate_genes(d$mat1)
prot <- annotate_genes(d$mat2)
mirna <- annotate_mirnas(d$mat3)
genes_proteins <- rownames(rna$data)
condv <- rownames(mirna$data)
gene_annot <- rna$annot
condv_annot <- mirna$annot
# Get plots and results on mrna-mirna and prot-mirna correlations
st_corr_mrna_mirna <- heatmap_corr(rna$data, mirna$data, mat1_name, mat3_name,
condv_annot, gene_annot,
file.path(out_folder, "mRNA-miRNA"))
library(devtools)
use_package("readr")
devtools::load_all(".")
# Get plots and results on mrna-mirna and prot-mirna correlations
st_corr_mrna_mirna <- heatmap_corr(rna$data, mirna$data, mat1_name, mat3_name,
condv_annot, gene_annot,
file.path(out_folder, "mRNA-miRNA"))
d <- compute_standard_corr(mat1, mat2, mat1_name, mat2_name)
d <- compute_standard_corr(rna$data, mirna$data, mat1_name, mat3_name)
devtools::load_all(".")
# Get plots and results on mrna-mirna and prot-mirna correlations
st_corr_mrna_mirna <- heatmap_corr(rna$data, mirna$data, mat1_name, mat3_name,
condv_annot, gene_annot,
file.path(out_folder, "mRNA-miRNA"))
devtools::load_all(".")
# Get plots and results on mrna-mirna and prot-mirna correlations
st_corr_mrna_mirna <- heatmap_corr(rna$data, mirna$data, mat1_name, mat3_name,
condv_annot, gene_annot,
file.path(out_folder, "mRNA-miRNA"))
d <- compute_standard_corr(rna$data, mirna$data, mat1_name, mat3_name)
d$cormatrix
d$pmatrix
d$table
# Get plots and results on mrna-mirna and prot-mirna correlations
st_corr_mrna_mirna <- heatmap_corr(rna$data, mirna$data, mat1_name, mat3_name,
condv_annot, gene_annot,
file.path(out_folder, "mRNA-miRNA"))
devtools::load_all(".")
# Get plots and results on mrna-mirna and prot-mirna correlations
st_corr_mrna_mirna <- heatmap_corr(rna$data, mirna$data, mat1_name, mat3_name,
condv_annot, gene_annot,
file.path(out_folder, "mRNA-miRNA"))
devtools::load_all(".")
# Get plots and results on mrna-mirna and prot-mirna correlations
st_corr_mrna_mirna <- heatmap_corr(rna$data, mirna$data, mat1_name, mat3_name,
condv_annot, gene_annot,
file.path(out_folder, "mRNA-miRNA"))
devtools::load_all(".")
# Get plots and results on mrna-mirna and prot-mirna correlations
st_corr_mrna_mirna <- heatmap_corr(rna$data, mirna$data, mat1_name, mat3_name,
condv_annot, gene_annot,
file.path(out_folder, "mRNA-miRNA"))
use_package("grid")
devtools::load_all(".")
# Get plots and results on mrna-mirna and prot-mirna correlations
st_corr_mrna_mirna <- heatmap_corr(rna$data, mirna$data, mat1_name, mat3_name,
condv_annot, gene_annot,
file.path(out_folder, "mRNA-miRNA"))
devtools::load_all(".")
# Get plots and results on mrna-mirna and prot-mirna correlations
st_corr_mrna_mirna <- heatmap_corr(rna$data, mirna$data, mat1_name, mat3_name,
condv_annot, gene_annot,
file.path(out_folder, "mRNA-miRNA"))
devtools::load_all(".")
# Get plots and results on mrna-mirna and prot-mirna correlations
st_corr_mrna_mirna <- heatmap_corr(rna$data, mirna$data, mat1_name, mat3_name,
condv_annot, gene_annot,
file.path(out_folder, "mRNA-miRNA"))
devtools::load_all(".")
# Get plots and results on mrna-mirna and prot-mirna correlations
st_corr_mrna_mirna <- heatmap_corr(rna$data, mirna$data, mat1_name, mat3_name,
condv_annot, gene_annot,
file.path(out_folder, "mRNA-miRNA"))
devtools::load_all(".")
# Get plots and results on mrna-mirna and prot-mirna correlations
st_corr_mrna_mirna <- heatmap_corr(rna$data, mirna$data, mat1_name, mat3_name,
condv_annot, gene_annot,
file.path(out_folder, "mRNA-miRNA"))
devtools::load_all(".")
# Get plots and results on mrna-mirna and prot-mirna correlations
st_corr_mrna_mirna <- heatmap_corr(rna$data, mirna$data, mat1_name, mat3_name,
condv_annot, gene_annot,
file.path(out_folder, "mRNA-miRNA"))
devtools::load_all(".")
# Get plots and results on mrna-mirna and prot-mirna correlations
st_corr_mrna_mirna <- heatmap_corr(rna$data, mirna$data, mat1_name, mat3_name,
condv_annot, gene_annot,
file.path(out_folder, "mRNA-miRNA"))
use_package("gratia")
devtools::load_all(".")
# Get plots and results on mrna-mirna and prot-mirna correlations
st_corr_mrna_mirna <- heatmap_corr(rna$data, mirna$data, mat1_name, mat3_name,
condv_annot, gene_annot,
file.path(out_folder, "mRNA-miRNA"))
st_corr_prot_mirna <- heatmap_corr(prot$data, mirna$data, mat2_name, mat3_name,
condv_annot, gene_annot,
file.path(out_folder, "prot-miRNA"))
library(ppcor)
library(parallel)
library(MASS)
library(ggplot2)
library(ggpubr)
library("future.apply")
library(Hmisc)
library(tidyverse)
library(reshape2)
library(ComplexHeatmap)
library(circlize)
library(stringr)
library(data.table)
library(docstring)
library(mice)
?mcmapply
?sapply
?pcor.test
?unlist
?write.csv
?cor.test
?gsub
?str_sub
readRDS
?readRDS
?data.table
?mclapply
?dcast
library(ppcor)
library(parallel)
library(MASS)
library(ggplot2)
library(ggpubr)
library("future.apply")
library(Hmisc)
library(tidyverse)
library(reshape2)
library(ComplexHeatmap)
library(circlize)
library(stringr)
library(data.table)
library(docstring)
library(mice)
?writeLines
